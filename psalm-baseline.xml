<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="4.30.0@d0bc6e25d89f649e4f36a534f330f8bb4643dd69">
  <file src="src/Collection.php">
    <InvalidArgument occurrences="1">
      <code>$callback</code>
    </InvalidArgument>
    <InvalidReturnStatement occurrences="1">
      <code>new self((new Wrap())(), [$this])</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="1">
      <code>CollectionInterface</code>
    </InvalidReturnType>
  </file>
  <file src="src/Operation/All.php">
    <InvalidReturnStatement occurrences="1"/>
    <InvalidReturnType occurrences="1">
      <code>Closure(bool): Closure(iterable&lt;TKey, T&gt;): (Generator&lt;int, T&gt;|Generator&lt;TKey, T&gt;)</code>
    </InvalidReturnType>
  </file>
  <file src="src/Operation/Averages.php">
    <InvalidScalarArgument occurrences="1">
      <code>static fn (float $acc, float $value, int $key): float =&gt; ($acc * $key + $value) / ($key + 1)</code>
    </InvalidScalarArgument>
  </file>
  <file src="src/Operation/Inits.php">
    <InvalidArgument occurrences="2">
      <code>[]</code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Pack.php">
    <InvalidReturnType occurrences="1">
      <code>Generator&lt;int, array{0: TKey, 1: T}&gt;</code>
    </InvalidReturnType>
  </file>
  <file src="src/Operation/Product.php">
    <InvalidArgument occurrences="2">
      <code>[[]]</code>
      <code>static fn (iterable $a, iterable $x): Generator =&gt; $f($x)($a)</code>
    </InvalidArgument>
  </file>
</files>
